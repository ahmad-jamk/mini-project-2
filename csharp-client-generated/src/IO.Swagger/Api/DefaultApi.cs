/* 
 * Doctor Appointment API
 *
 * API for managing Doctor Appointment
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a doctor appointment by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appointmentId"></param>
        /// <returns></returns>
        void DoctorAppointmentAppointmentIdDelete (int? appointmentId);

        /// <summary>
        /// Delete a doctor appointment by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appointmentId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DoctorAppointmentAppointmentIdDeleteWithHttpInfo (int? appointmentId);
        /// <summary>
        /// Get a doctor appointment by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appointmentId"></param>
        /// <returns>DoctorAppointment</returns>
        DoctorAppointment DoctorAppointmentAppointmentIdGet (int? appointmentId);

        /// <summary>
        /// Get a doctor appointment by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appointmentId"></param>
        /// <returns>ApiResponse of DoctorAppointment</returns>
        ApiResponse<DoctorAppointment> DoctorAppointmentAppointmentIdGetWithHttpInfo (int? appointmentId);
        /// <summary>
        /// Update a doctor appointment by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appointmentId"></param>
        /// <returns></returns>
        void DoctorAppointmentAppointmentIdPut (DoctorAppointmentInput body, int? appointmentId);

        /// <summary>
        /// Update a doctor appointment by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appointmentId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DoctorAppointmentAppointmentIdPutWithHttpInfo (DoctorAppointmentInput body, int? appointmentId);
        /// <summary>
        /// Delete all doctor appointments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void DoctorAppointmentDelete ();

        /// <summary>
        /// Delete all doctor appointments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DoctorAppointmentDeleteWithHttpInfo ();
        /// <summary>
        /// Get all doctor appointment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;DoctorAppointmentList&gt;</returns>
        List<DoctorAppointmentList> DoctorAppointmentGet ();

        /// <summary>
        /// Get all doctor appointment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;DoctorAppointmentList&gt;</returns>
        ApiResponse<List<DoctorAppointmentList>> DoctorAppointmentGetWithHttpInfo ();
        /// <summary>
        /// Add a new doctor appointment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        void DoctorAppointmentPost (DoctorAppointmentInput body);

        /// <summary>
        /// Add a new doctor appointment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DoctorAppointmentPostWithHttpInfo (DoctorAppointmentInput body);
        /// <summary>
        /// Update all doctor appointments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        void DoctorAppointmentPut (List<DoctorAppointment> body);

        /// <summary>
        /// Update all doctor appointments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DoctorAppointmentPutWithHttpInfo (List<DoctorAppointment> body);
        /// <summary>
        /// Search doctor appointment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">doctor appointment provided by the id (optional)</param>
        /// <param name="doctor">Doctor name (optional)</param>
        /// <param name="patient">Patient name (optional)</param>
        /// <param name="startDate">Start date of the time period (optional)</param>
        /// <param name="endDate">End date of the time period (optional)</param>
        /// <returns>List&lt;DoctorAppointment&gt;</returns>
        List<DoctorAppointment> DoctorAppointmentSearchGet (string id = null, string doctor = null, string patient = null, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// Search doctor appointment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">doctor appointment provided by the id (optional)</param>
        /// <param name="doctor">Doctor name (optional)</param>
        /// <param name="patient">Patient name (optional)</param>
        /// <param name="startDate">Start date of the time period (optional)</param>
        /// <param name="endDate">End date of the time period (optional)</param>
        /// <returns>ApiResponse of List&lt;DoctorAppointment&gt;</returns>
        ApiResponse<List<DoctorAppointment>> DoctorAppointmentSearchGetWithHttpInfo (string id = null, string doctor = null, string patient = null, DateTime? startDate = null, DateTime? endDate = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a doctor appointment by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appointmentId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DoctorAppointmentAppointmentIdDeleteAsync (int? appointmentId);

        /// <summary>
        /// Delete a doctor appointment by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appointmentId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DoctorAppointmentAppointmentIdDeleteAsyncWithHttpInfo (int? appointmentId);
        /// <summary>
        /// Get a doctor appointment by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appointmentId"></param>
        /// <returns>Task of DoctorAppointment</returns>
        System.Threading.Tasks.Task<DoctorAppointment> DoctorAppointmentAppointmentIdGetAsync (int? appointmentId);

        /// <summary>
        /// Get a doctor appointment by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appointmentId"></param>
        /// <returns>Task of ApiResponse (DoctorAppointment)</returns>
        System.Threading.Tasks.Task<ApiResponse<DoctorAppointment>> DoctorAppointmentAppointmentIdGetAsyncWithHttpInfo (int? appointmentId);
        /// <summary>
        /// Update a doctor appointment by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appointmentId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DoctorAppointmentAppointmentIdPutAsync (DoctorAppointmentInput body, int? appointmentId);

        /// <summary>
        /// Update a doctor appointment by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appointmentId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DoctorAppointmentAppointmentIdPutAsyncWithHttpInfo (DoctorAppointmentInput body, int? appointmentId);
        /// <summary>
        /// Delete all doctor appointments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DoctorAppointmentDeleteAsync ();

        /// <summary>
        /// Delete all doctor appointments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DoctorAppointmentDeleteAsyncWithHttpInfo ();
        /// <summary>
        /// Get all doctor appointment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;DoctorAppointmentList&gt;</returns>
        System.Threading.Tasks.Task<List<DoctorAppointmentList>> DoctorAppointmentGetAsync ();

        /// <summary>
        /// Get all doctor appointment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;DoctorAppointmentList&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DoctorAppointmentList>>> DoctorAppointmentGetAsyncWithHttpInfo ();
        /// <summary>
        /// Add a new doctor appointment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DoctorAppointmentPostAsync (DoctorAppointmentInput body);

        /// <summary>
        /// Add a new doctor appointment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DoctorAppointmentPostAsyncWithHttpInfo (DoctorAppointmentInput body);
        /// <summary>
        /// Update all doctor appointments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DoctorAppointmentPutAsync (List<DoctorAppointment> body);

        /// <summary>
        /// Update all doctor appointments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DoctorAppointmentPutAsyncWithHttpInfo (List<DoctorAppointment> body);
        /// <summary>
        /// Search doctor appointment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">doctor appointment provided by the id (optional)</param>
        /// <param name="doctor">Doctor name (optional)</param>
        /// <param name="patient">Patient name (optional)</param>
        /// <param name="startDate">Start date of the time period (optional)</param>
        /// <param name="endDate">End date of the time period (optional)</param>
        /// <returns>Task of List&lt;DoctorAppointment&gt;</returns>
        System.Threading.Tasks.Task<List<DoctorAppointment>> DoctorAppointmentSearchGetAsync (string id = null, string doctor = null, string patient = null, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// Search doctor appointment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">doctor appointment provided by the id (optional)</param>
        /// <param name="doctor">Doctor name (optional)</param>
        /// <param name="patient">Patient name (optional)</param>
        /// <param name="startDate">Start date of the time period (optional)</param>
        /// <param name="endDate">End date of the time period (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DoctorAppointment&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DoctorAppointment>>> DoctorAppointmentSearchGetAsyncWithHttpInfo (string id = null, string doctor = null, string patient = null, DateTime? startDate = null, DateTime? endDate = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DefaultApi : IDefaultApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// </summary>
        /// <returns></returns>
        public DefaultApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a doctor appointment by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appointmentId"></param>
        /// <returns></returns>
        public void DoctorAppointmentAppointmentIdDelete (int? appointmentId)
        {
             DoctorAppointmentAppointmentIdDeleteWithHttpInfo(appointmentId);
        }

        /// <summary>
        /// Delete a doctor appointment by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appointmentId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DoctorAppointmentAppointmentIdDeleteWithHttpInfo (int? appointmentId)
        {
            // verify the required parameter 'appointmentId' is set
            if (appointmentId == null)
                throw new ApiException(400, "Missing required parameter 'appointmentId' when calling DefaultApi->DoctorAppointmentAppointmentIdDelete");

            var localVarPath = "/doctor-appointment/{appointmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appointmentId != null) localVarPathParams.Add("appointmentId", this.Configuration.ApiClient.ParameterToString(appointmentId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DoctorAppointmentAppointmentIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a doctor appointment by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appointmentId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DoctorAppointmentAppointmentIdDeleteAsync (int? appointmentId)
        {
             await DoctorAppointmentAppointmentIdDeleteAsyncWithHttpInfo(appointmentId);

        }

        /// <summary>
        /// Delete a doctor appointment by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appointmentId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DoctorAppointmentAppointmentIdDeleteAsyncWithHttpInfo (int? appointmentId)
        {
            // verify the required parameter 'appointmentId' is set
            if (appointmentId == null)
                throw new ApiException(400, "Missing required parameter 'appointmentId' when calling DefaultApi->DoctorAppointmentAppointmentIdDelete");

            var localVarPath = "/doctor-appointment/{appointmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appointmentId != null) localVarPathParams.Add("appointmentId", this.Configuration.ApiClient.ParameterToString(appointmentId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DoctorAppointmentAppointmentIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get a doctor appointment by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appointmentId"></param>
        /// <returns>DoctorAppointment</returns>
        public DoctorAppointment DoctorAppointmentAppointmentIdGet (int? appointmentId)
        {
             ApiResponse<DoctorAppointment> localVarResponse = DoctorAppointmentAppointmentIdGetWithHttpInfo(appointmentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a doctor appointment by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appointmentId"></param>
        /// <returns>ApiResponse of DoctorAppointment</returns>
        public ApiResponse< DoctorAppointment > DoctorAppointmentAppointmentIdGetWithHttpInfo (int? appointmentId)
        {
            // verify the required parameter 'appointmentId' is set
            if (appointmentId == null)
                throw new ApiException(400, "Missing required parameter 'appointmentId' when calling DefaultApi->DoctorAppointmentAppointmentIdGet");

            var localVarPath = "/doctor-appointment/{appointmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appointmentId != null) localVarPathParams.Add("appointmentId", this.Configuration.ApiClient.ParameterToString(appointmentId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DoctorAppointmentAppointmentIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DoctorAppointment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DoctorAppointment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DoctorAppointment)));
        }

        /// <summary>
        /// Get a doctor appointment by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appointmentId"></param>
        /// <returns>Task of DoctorAppointment</returns>
        public async System.Threading.Tasks.Task<DoctorAppointment> DoctorAppointmentAppointmentIdGetAsync (int? appointmentId)
        {
             ApiResponse<DoctorAppointment> localVarResponse = await DoctorAppointmentAppointmentIdGetAsyncWithHttpInfo(appointmentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a doctor appointment by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appointmentId"></param>
        /// <returns>Task of ApiResponse (DoctorAppointment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DoctorAppointment>> DoctorAppointmentAppointmentIdGetAsyncWithHttpInfo (int? appointmentId)
        {
            // verify the required parameter 'appointmentId' is set
            if (appointmentId == null)
                throw new ApiException(400, "Missing required parameter 'appointmentId' when calling DefaultApi->DoctorAppointmentAppointmentIdGet");

            var localVarPath = "/doctor-appointment/{appointmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appointmentId != null) localVarPathParams.Add("appointmentId", this.Configuration.ApiClient.ParameterToString(appointmentId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DoctorAppointmentAppointmentIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DoctorAppointment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DoctorAppointment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DoctorAppointment)));
        }

        /// <summary>
        /// Update a doctor appointment by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appointmentId"></param>
        /// <returns></returns>
        public void DoctorAppointmentAppointmentIdPut (DoctorAppointmentInput body, int? appointmentId)
        {
             DoctorAppointmentAppointmentIdPutWithHttpInfo(body, appointmentId);
        }

        /// <summary>
        /// Update a doctor appointment by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appointmentId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DoctorAppointmentAppointmentIdPutWithHttpInfo (DoctorAppointmentInput body, int? appointmentId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->DoctorAppointmentAppointmentIdPut");
            // verify the required parameter 'appointmentId' is set
            if (appointmentId == null)
                throw new ApiException(400, "Missing required parameter 'appointmentId' when calling DefaultApi->DoctorAppointmentAppointmentIdPut");

            var localVarPath = "/doctor-appointment/{appointmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appointmentId != null) localVarPathParams.Add("appointmentId", this.Configuration.ApiClient.ParameterToString(appointmentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DoctorAppointmentAppointmentIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update a doctor appointment by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appointmentId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DoctorAppointmentAppointmentIdPutAsync (DoctorAppointmentInput body, int? appointmentId)
        {
             await DoctorAppointmentAppointmentIdPutAsyncWithHttpInfo(body, appointmentId);

        }

        /// <summary>
        /// Update a doctor appointment by ID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appointmentId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DoctorAppointmentAppointmentIdPutAsyncWithHttpInfo (DoctorAppointmentInput body, int? appointmentId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->DoctorAppointmentAppointmentIdPut");
            // verify the required parameter 'appointmentId' is set
            if (appointmentId == null)
                throw new ApiException(400, "Missing required parameter 'appointmentId' when calling DefaultApi->DoctorAppointmentAppointmentIdPut");

            var localVarPath = "/doctor-appointment/{appointmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appointmentId != null) localVarPathParams.Add("appointmentId", this.Configuration.ApiClient.ParameterToString(appointmentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DoctorAppointmentAppointmentIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete all doctor appointments 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void DoctorAppointmentDelete ()
        {
             DoctorAppointmentDeleteWithHttpInfo();
        }

        /// <summary>
        /// Delete all doctor appointments 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DoctorAppointmentDeleteWithHttpInfo ()
        {

            var localVarPath = "/doctor-appointment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DoctorAppointmentDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete all doctor appointments 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DoctorAppointmentDeleteAsync ()
        {
             await DoctorAppointmentDeleteAsyncWithHttpInfo();

        }

        /// <summary>
        /// Delete all doctor appointments 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DoctorAppointmentDeleteAsyncWithHttpInfo ()
        {

            var localVarPath = "/doctor-appointment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DoctorAppointmentDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get all doctor appointment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;DoctorAppointmentList&gt;</returns>
        public List<DoctorAppointmentList> DoctorAppointmentGet ()
        {
             ApiResponse<List<DoctorAppointmentList>> localVarResponse = DoctorAppointmentGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all doctor appointment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;DoctorAppointmentList&gt;</returns>
        public ApiResponse< List<DoctorAppointmentList> > DoctorAppointmentGetWithHttpInfo ()
        {

            var localVarPath = "/doctor-appointment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DoctorAppointmentGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DoctorAppointmentList>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DoctorAppointmentList>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DoctorAppointmentList>)));
        }

        /// <summary>
        /// Get all doctor appointment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;DoctorAppointmentList&gt;</returns>
        public async System.Threading.Tasks.Task<List<DoctorAppointmentList>> DoctorAppointmentGetAsync ()
        {
             ApiResponse<List<DoctorAppointmentList>> localVarResponse = await DoctorAppointmentGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all doctor appointment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;DoctorAppointmentList&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DoctorAppointmentList>>> DoctorAppointmentGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/doctor-appointment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DoctorAppointmentGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DoctorAppointmentList>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DoctorAppointmentList>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DoctorAppointmentList>)));
        }

        /// <summary>
        /// Add a new doctor appointment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        public void DoctorAppointmentPost (DoctorAppointmentInput body)
        {
             DoctorAppointmentPostWithHttpInfo(body);
        }

        /// <summary>
        /// Add a new doctor appointment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DoctorAppointmentPostWithHttpInfo (DoctorAppointmentInput body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->DoctorAppointmentPost");

            var localVarPath = "/doctor-appointment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DoctorAppointmentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Add a new doctor appointment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DoctorAppointmentPostAsync (DoctorAppointmentInput body)
        {
             await DoctorAppointmentPostAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Add a new doctor appointment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DoctorAppointmentPostAsyncWithHttpInfo (DoctorAppointmentInput body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->DoctorAppointmentPost");

            var localVarPath = "/doctor-appointment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DoctorAppointmentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update all doctor appointments 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        public void DoctorAppointmentPut (List<DoctorAppointment> body)
        {
             DoctorAppointmentPutWithHttpInfo(body);
        }

        /// <summary>
        /// Update all doctor appointments 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DoctorAppointmentPutWithHttpInfo (List<DoctorAppointment> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->DoctorAppointmentPut");

            var localVarPath = "/doctor-appointment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DoctorAppointmentPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update all doctor appointments 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DoctorAppointmentPutAsync (List<DoctorAppointment> body)
        {
             await DoctorAppointmentPutAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update all doctor appointments 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DoctorAppointmentPutAsyncWithHttpInfo (List<DoctorAppointment> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->DoctorAppointmentPut");

            var localVarPath = "/doctor-appointment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DoctorAppointmentPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Search doctor appointment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">doctor appointment provided by the id (optional)</param>
        /// <param name="doctor">Doctor name (optional)</param>
        /// <param name="patient">Patient name (optional)</param>
        /// <param name="startDate">Start date of the time period (optional)</param>
        /// <param name="endDate">End date of the time period (optional)</param>
        /// <returns>List&lt;DoctorAppointment&gt;</returns>
        public List<DoctorAppointment> DoctorAppointmentSearchGet (string id = null, string doctor = null, string patient = null, DateTime? startDate = null, DateTime? endDate = null)
        {
             ApiResponse<List<DoctorAppointment>> localVarResponse = DoctorAppointmentSearchGetWithHttpInfo(id, doctor, patient, startDate, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search doctor appointment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">doctor appointment provided by the id (optional)</param>
        /// <param name="doctor">Doctor name (optional)</param>
        /// <param name="patient">Patient name (optional)</param>
        /// <param name="startDate">Start date of the time period (optional)</param>
        /// <param name="endDate">End date of the time period (optional)</param>
        /// <returns>ApiResponse of List&lt;DoctorAppointment&gt;</returns>
        public ApiResponse< List<DoctorAppointment> > DoctorAppointmentSearchGetWithHttpInfo (string id = null, string doctor = null, string patient = null, DateTime? startDate = null, DateTime? endDate = null)
        {

            var localVarPath = "/doctor-appointment/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (doctor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "doctor", doctor)); // query parameter
            if (patient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "patient", patient)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DoctorAppointmentSearchGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DoctorAppointment>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DoctorAppointment>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DoctorAppointment>)));
        }

        /// <summary>
        /// Search doctor appointment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">doctor appointment provided by the id (optional)</param>
        /// <param name="doctor">Doctor name (optional)</param>
        /// <param name="patient">Patient name (optional)</param>
        /// <param name="startDate">Start date of the time period (optional)</param>
        /// <param name="endDate">End date of the time period (optional)</param>
        /// <returns>Task of List&lt;DoctorAppointment&gt;</returns>
        public async System.Threading.Tasks.Task<List<DoctorAppointment>> DoctorAppointmentSearchGetAsync (string id = null, string doctor = null, string patient = null, DateTime? startDate = null, DateTime? endDate = null)
        {
             ApiResponse<List<DoctorAppointment>> localVarResponse = await DoctorAppointmentSearchGetAsyncWithHttpInfo(id, doctor, patient, startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search doctor appointment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">doctor appointment provided by the id (optional)</param>
        /// <param name="doctor">Doctor name (optional)</param>
        /// <param name="patient">Patient name (optional)</param>
        /// <param name="startDate">Start date of the time period (optional)</param>
        /// <param name="endDate">End date of the time period (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DoctorAppointment&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DoctorAppointment>>> DoctorAppointmentSearchGetAsyncWithHttpInfo (string id = null, string doctor = null, string patient = null, DateTime? startDate = null, DateTime? endDate = null)
        {

            var localVarPath = "/doctor-appointment/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (doctor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "doctor", doctor)); // query parameter
            if (patient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "patient", patient)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DoctorAppointmentSearchGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DoctorAppointment>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DoctorAppointment>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DoctorAppointment>)));
        }

    }
}
